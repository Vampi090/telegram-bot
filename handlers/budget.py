from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, filters, MessageHandler, ConversationHandler
from keyboards.budget_menu import budget_menu_keyboard
from services.logging_service import log_command_usage
from services.database_service import add_goal, get_goals, set_budget, get_budgets


async def handle_budgeting_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = budget_menu_keyboard()

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="üì• –ú–µ–Ω—é –±—é–¥–∂–µ—Ç—É",
            reply_markup=reply_markup
        )


async def handle_goal_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–ª–µ–π."""
    await log_command_usage(update, context)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
    if context.args and len(context.args) >= 2:
        try:
            amount = float(context.args[0])
            description = " ".join(context.args[1:])

            success = add_goal(user_id, amount, description)

            if success:
                text = f"üéØ –¶–µ–ª—å '{description}' –Ω–∞ —Å—É–º–º—É {amount} –≥—Ä–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
            else:
                text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏."
        except ValueError:
            text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /goal [—Å—É–º–º–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]"

        back_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
        ])

        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=back_button
            )
        else:
            await update.message.reply_text(text, reply_markup=back_button)
        return

    # –ü–æ–∫–∞–∑ —Ü–µ–ª–µ–π
    goals = get_goals(user_id)

    if not goals:
        text = "üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π."
    else:
        text = "üéØ *–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:*\n"
        for amount, description, date in goals:
            text += f"üîπ {description}: {amount} –≥—Ä–Ω (–¥–∞—Ç–∞: {date})\n"

    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
    ])

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=back_button
        )
    else:
        await update.message.reply_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=back_button
        )


async def handle_budget_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—é–¥–∂–µ—Ç–∞."""
    await log_command_usage(update, context)

    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏", –µ—Å–ª–∏ —ç—Ç–æ callback_query
    if update.callback_query:
        await update.callback_query.answer()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if context.user_data.get('budget_message_id'):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id,
                                            message_id=context.user_data['budget_message_id'])
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    args = context.args if update.message else []

    # –°–æ–∑–¥–∞—ë–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
    back_button_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
    ])

    if len(args) == 2:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞
        category = " ".join(args[:-1])  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
        try:
            amount = float(args[-1])
        except ValueError:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞.",
                reply_markup=back_button_markup
            )
            context.user_data['budget_message_id'] = msg.message_id
            return

        success = set_budget(user_id, category, amount)

        if success:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ë—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '*{category}*' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{amount} –≥—Ä–Ω*",
                parse_mode="Markdown",
                reply_markup=back_button_markup
            )
        else:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞.",
                reply_markup=back_button_markup
            )
        context.user_data['budget_message_id'] = msg.message_id

    else:
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –±—é–¥–∂–µ—Ç–∞
        budgets = get_budgets(user_id)

        if not budgets:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="üí° –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.",
                reply_markup=back_button_markup
            )
            context.user_data['budget_message_id'] = msg.message_id
            return

        # Calculate total budget
        total_budget = sum(amount for _, amount in budgets)

        message_lines = ["üìä *–í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã:*"]

        # Add total budget section
        message_lines.append("\nüíº *–û–±—â–∏–π –±—é–¥–∂–µ—Ç:*")
        message_lines.append(f"üí∞ `{total_budget} –≥—Ä–Ω`")

        # Add category budget section
        message_lines.append("\nüìã *–ë—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*")
        for category, amount in budgets:
            message_lines.append(f"üí∞ *{category}*: `{amount} –≥—Ä–Ω`")

        msg = await context.bot.send_message(
            chat_id=user_id,
            text="\n".join(message_lines),
            parse_mode="Markdown",
            reply_markup=back_button_markup
        )
        context.user_data['budget_message_id'] = msg.message_id


async def close_budget_if_active(update: Update, context: CallbackContext):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if context.user_data.get('budget_message_id'):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id,
                                            message_id=context.user_data['budget_message_id'])
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['budget_message_id'] = None


async def track_goals(update: Update, context: CallbackContext):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º."""
    await log_command_usage(update, context)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏ query
    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    goals = get_goals(user_id)

    if not goals:
        await context.bot.send_message(chat_id=user_id, text="üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        return

    message_lines = ["üìå *–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:*"]
    for amount, description, date in goals:
        message_lines.append(f"üí∞ {description}: {amount} –≥—Ä–Ω (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {date})")

    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
    ])

    message = "\n".join(message_lines)
    await context.bot.send_message(
        chat_id=user_id, 
        text=message, 
        parse_mode="Markdown",
        reply_markup=back_button
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
budgeting_handler = CallbackQueryHandler(handle_budgeting_callback, pattern='^budgeting$')
goal_handler = CallbackQueryHandler(handle_goal_callback, pattern='^goal$')
budget_handler = CallbackQueryHandler(handle_budget_callback, pattern='^budget$')
goal_command_handler = CommandHandler('goal', handle_goal_callback)
budget_command_handler = CommandHandler('budget', handle_budget_callback)
track_goals_handler = CommandHandler('track_goals', track_goals)
