from telegram import Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler
from keyboards.analytics_menu import analytics_menu_keyboard
from services.logging_service import log_command_usage
from services.analytics_service import (
    get_expense_stats,
    generate_expense_chart,
    export_transactions_to_excel,
    get_transaction_report
)
import os


async def handle_analytics_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = analytics_menu_keyboard()

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="üì• –ú–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏",
            reply_markup=reply_markup
        )


async def handle_stats_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
    stats_data = get_expense_stats(user_id)

    if not stats_data:
        text = "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö."
    else:
        text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
        for category, total in stats_data:
            text += f"üîπ {category}: {round(total, 2)} –≥—Ä–Ω\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    reply_markup = analytics_menu_keyboard()

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def handle_chart_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
    file_path = generate_expense_chart(user_id)

    if not file_path:
        await update.callback_query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=analytics_menu_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    with open(file_path, "rb") as photo:
        await context.bot.send_photo(
            chat_id=user_id, 
            photo=photo, 
            caption="üìä –í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤."
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await context.bot.send_message(
        chat_id=user_id,
        text="üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=analytics_menu_keyboard()
    )


async def handle_report_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"""
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∑–∞ 30 –¥–Ω–µ–π
    report = get_transaction_report(user_id, days=30)

    if report['transaction_count'] == 0:
        text = "üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."
    else:
        text = f"üìä *–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {report['days']} –¥–Ω–µ–π:*\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥—ã: {round(report['total_income'], 2)} –≥—Ä–Ω\n"
        text += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {round(report['total_expense'], 2)} –≥—Ä–Ω\n"
        text += f"üìà –ë–∞–ª–∞–Ω—Å: {round(report['balance'], 2)} –≥—Ä–Ω\n\n"

        if report['top_expense_categories']:
            text += "üîù *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
            for category, amount in report['top_expense_categories']:
                text += f"üîπ {category}: {round(abs(amount), 2)} –≥—Ä–Ω\n"

        text += f"\nüìù –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {report['transaction_count']}"

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=analytics_menu_keyboard()
    )


async def handle_export_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Excel"""
    await log_command_usage(update, context)

    user_id = update.effective_user.id

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Excel
    file_path = export_transactions_to_excel(user_id)

    if not file_path:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    with open(file_path, "rb") as doc:
        await context.bot.send_document(
            chat_id=user_id,
            document=doc,
            filename=f"transactions_{user_id}.xlsx",
            caption="üìÅ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(file_path)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
analytics_handler = CallbackQueryHandler(handle_analytics_callback, pattern='^analytics$')
stats_handler = CallbackQueryHandler(handle_stats_callback, pattern='^stats$')
chart_handler = CallbackQueryHandler(handle_chart_callback, pattern='^chart$')
report_handler = CallbackQueryHandler(handle_report_callback, pattern='^report$')
export_handler = CommandHandler('export', handle_export_command)
