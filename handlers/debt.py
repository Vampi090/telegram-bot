from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from keyboards.debt_menu import debt_menu_keyboard
from services.logging_service import log_command_usage
from services.database_service import save_debt, get_active_debts, get_debt_history, close_debt, get_budgets
from services.transaction_service import add_new_transaction
from datetime import datetime, time

DEBT_NAME, DEBT_AMOUNT, DEBT_TYPE, DEBT_AMOUNT_INPUT, DEBT_NAME_INPUT = range(5)


async def handle_debt_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = debt_menu_keyboard()

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="ü§ù –û–±–ª—ñ–∫ –±–æ—Ä–≥—ñ–≤",
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            text="ü§ù –û–±–ª—ñ–∫ –±–æ—Ä–≥—ñ–≤",
            reply_markup=reply_markup
        )


async def debt_menu_button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "view_debts":
        debts = get_active_debts(user_id)
        if debts:
            text = "üìú –í–∞—à—ñ –±–æ—Ä–≥–∏:\n\n"

            debts_i_owe = [(name, amount) for name, amount in debts if amount < 0]
            if debts_i_owe:
                text += "üí∏ –í–∏ –≤–∏–Ω–Ω—ñ:\n"
                for name, amount in debts_i_owe:
                    text += f"‚Ä¢ {name}: {abs(amount)}‚Ç¥\n"
                text += "\n"

            debts_owed_to_me = [(name, amount) for name, amount in debts if amount > 0]
            if debts_owed_to_me:
                text += "üí∞ –í–∞–º –≤–∏–Ω–Ω—ñ:\n"
                for name, amount in debts_owed_to_me:
                    text += f"‚Ä¢ {name}: {amount}‚Ç¥\n"
        else:
            text = "‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –±–æ—Ä–≥—ñ–≤."
        await query.message.edit_text(text, reply_markup=generate_back_button())

    elif query.data == "debt_history":
        history = get_debt_history(user_id)
        if history:
            text = "<b>üìö –Ü—Å—Ç–æ—Ä—ñ—è –±–æ—Ä–≥—ñ–≤:</b>\n\n"

            debts_i_owe = [(name, amount, status, timestamp) for name, amount, status, timestamp in history if
                           amount < 0]
            if debts_i_owe:
                text += "<b>üí∏ –í–∏ –≤–∏–Ω–Ω—ñ:</b>\n"
                for name, amount, status, timestamp in debts_i_owe:
                    text += f"‚Ä¢ <b>{name}</b>\n  <code>–°—É–º–∞:</code> <b>{abs(amount)}‚Ç¥</b>\n  <code>–°—Ç–∞—Ç—É—Å:</code> {status}\n  <code>–î–∞—Ç–∞:</code> {timestamp}\n\n"

            debts_owed_to_me = [(name, amount, status, timestamp) for name, amount, status, timestamp in history if
                                amount > 0]
            if debts_owed_to_me:
                text += "<b>üí∞ –í–∞–º –≤–∏–Ω–Ω—ñ:</b>\n"
                for name, amount, status, timestamp in debts_owed_to_me:
                    text += f"‚Ä¢ <b>{name}</b>\n  <code>–°—É–º–∞:</code> <b>{amount}‚Ç¥</b>\n  <code>–°—Ç–∞—Ç—É—Å:</code> {status}\n  <code>–î–∞—Ç–∞:</code> {timestamp}\n\n"
        else:
            text = "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è."
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=generate_back_button())

    elif query.data == "close_debt":
        text = "<b>üìú –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –±–æ—Ä–≥—ñ–≤:</b>"
        keyboard = [
            [InlineKeyboardButton("üí∏ –í–∏ –≤–∏–Ω–Ω—ñ", callback_data="debts_i_owe")],
            [InlineKeyboardButton("üí∞ –í–∞–º –≤–∏–Ω–Ω—ñ", callback_data="debts_owed_to_me")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]
        ]

        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "add_debt":
        text = "‚ûï *–î–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ—Ä–≥—É*\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –±–æ—Ä–≥—É:"
        keyboard = [
            [InlineKeyboardButton("üí∏ –Ø –≤–∏–Ω–µ–Ω", callback_data="debt_i_owe")],
            [InlineKeyboardButton("üí∞ –ú–µ–Ω—ñ –≤–∏–Ω–Ω—ñ", callback_data="debt_owed_to_me")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]
        ]
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "remind_debt":
        await set_daily_reminder(update, context)
        await query.message.edit_text(
            "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –æ 9:00.",
            reply_markup=generate_back_button()
        )

    elif query.data == "help_debt":
        help_text = (
            "üÜò *–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ä–≥–∞–º:*\n\n"
            "‚ûï –î–æ–¥–∞—Ç–∏ –±–æ—Ä–≥ ‚Äî –¥–æ–¥–∞—î –Ω–æ–≤–∏–π –±–æ—Ä–≥ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è–º —Ç–∏–ø—É (—è –≤–∏–Ω–µ–Ω/–º–µ–Ω—ñ –≤–∏–Ω–Ω—ñ).\n"
            "üí∏ –Ø –≤–∏–Ω–µ–Ω ‚Äî –¥–æ–¥–∞—î –±–æ—Ä–≥, —è–∫–∏–π –≤–∏ –≤–∏–Ω–Ω—ñ –∫–æ–º—É—Å—å.\n"
            "üí∞ –ú–µ–Ω—ñ –≤–∏–Ω–Ω—ñ ‚Äî –¥–æ–¥–∞—î –±–æ—Ä–≥, —è–∫–∏–π —Ö—Ç–æ—Å—å –≤–∏–Ω–µ–Ω –≤–∞–º.\n"
            "üìú –ú–æ—ó –±–æ—Ä–≥–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤.\n"
            "üìö –Ü—Å—Ç–æ—Ä—ñ—è ‚Äî –≤—Å—ñ –±–æ—Ä–≥–∏, –≤–∫–ª—é—á–∞—é—á–∏ –∑–∞–∫—Ä–∏—Ç—ñ.\n"
            "‚úÖ –ó–∞–∫—Ä–∏—Ç–∏ –±–æ—Ä–≥ ‚Äî –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø–æ–≥–∞—à–µ–Ω–∏–π.\n"
            "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 9:00.\n"
            "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚Äî –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
        )
        await query.message.edit_text(help_text, parse_mode="Markdown", reply_markup=generate_back_button())

    elif query.data == "debt_back":
        await handle_debt_callback(update, context)


async def debt_type_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "debt_i_owe":
        context.user_data["debt_type"] = "i_owe"
        await query.message.edit_text(
            "üí∏ *–Ø –≤–∏–Ω–µ–Ω*\n\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –±–æ—Ä–≥—É:",
            parse_mode="Markdown"
        )
        return DEBT_AMOUNT_INPUT

    elif query.data == "debt_owed_to_me":
        context.user_data["debt_type"] = "owed_to_me"
        await query.message.edit_text(
            "üí∞ *–ú–µ–Ω—ñ –≤–∏–Ω–Ω—ñ*\n\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –±–æ—Ä–≥—É:",
            parse_mode="Markdown"
        )
        return DEBT_AMOUNT_INPUT


async def show_debts_by_category(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    debts = get_active_debts(user_id)

    if not debts:
        await query.message.edit_text(
            "‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤.",
            reply_markup=generate_back_button()
        )
        return

    if query.data == "debts_i_owe":
        debts_i_owe = [(name, amount) for name, amount in debts if amount < 0]

        if not debts_i_owe:
            await query.message.edit_text(
                "‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –±–æ—Ä–≥—ñ–≤, —è–∫—ñ –≤–∏ –≤–∏–Ω–Ω—ñ.",
                reply_markup=generate_back_button()
            )
            return

        text = "<b>üìú –ë–æ—Ä–≥–∏, —è–∫—ñ –≤–∏ –≤–∏–Ω–Ω—ñ:</b>\n\n"
        for i, (name, amount) in enumerate(debts_i_owe):
            text += f"{i + 1}. <b>{name}</b>: {abs(amount)}‚Ç¥\n"

        keyboard = []

        for i, (name, amount) in enumerate(debts_i_owe):
            row = [
                InlineKeyboardButton(f"üí∏ –ü–æ–≥–∞—Å–∏—Ç–∏: {name}", callback_data=f"pay_debt_{name}_{abs(amount)}"),
                InlineKeyboardButton(f"–í–∏–¥–∞–ª–∏—Ç–∏: {name}", callback_data=f"confirm_delete_{name}_{abs(amount)}_i_owe")
            ]
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="close_debt")])

        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "debts_owed_to_me":
        debts_owed_to_me = [(name, amount) for name, amount in debts if amount > 0]

        if not debts_owed_to_me:
            await query.message.edit_text(
                "‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –±–æ—Ä–≥—ñ–≤, —è–∫—ñ –≤–∞–º –≤–∏–Ω–Ω—ñ.",
                reply_markup=generate_back_button()
            )
            return

        text = "<b>üìú –ë–æ—Ä–≥–∏, —è–∫—ñ –≤–∞–º –≤–∏–Ω–Ω—ñ:</b>\n\n"
        for i, (name, amount) in enumerate(debts_owed_to_me):
            text += f"{i + 1}. <b>{name}</b>: {amount}‚Ç¥\n"

        keyboard = []

        for i, (name, amount) in enumerate(debts_owed_to_me):
            row = [
                InlineKeyboardButton(f"üí∞ –ë–æ—Ä–≥ –ø–æ–≥–∞—à–µ–Ω–æ: {name}", callback_data=f"debt_paid_{name}_{amount}"),
                InlineKeyboardButton(f"–í–∏–¥–∞–ª–∏—Ç–∏: {name}", callback_data=f"confirm_delete_{name}_{amount}_owed_to_me")
            ]
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="close_debt")])

        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def handle_debt_action(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    if callback_data.startswith("pay_debt_"):
        parts = callback_data.split("_", 2)
        if len(parts) < 3:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        name_amount = parts[2].rsplit("_", 1)
        if len(name_amount) < 2:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        name = name_amount[0]
        try:
            amount = float(name_amount[1])
        except ValueError:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Å—É–º–∏.")
            return

        budgets = get_budgets(user_id)
        total_budget = sum(budget_amount for _, budget_amount in budgets)

        if total_budget < amount:
            await query.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ —É –±—é–¥–∂–µ—Ç—ñ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–Ω—è –±–æ—Ä–≥—É.\n"
                f"–ü–æ—Ç—Ä—ñ–±–Ω–æ: {amount}‚Ç¥\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {total_budget}‚Ç¥",
                reply_markup=generate_back_button()
            )
            return

        if close_debt(user_id, name, -amount):
            add_new_transaction(user_id, -amount, "–ü–æ–≥–∞—à–µ–Ω–Ω—è –±–æ—Ä–≥—É", "–≤–∏—Ç—Ä–∞—Ç–∞")

            await query.message.edit_text(
                f"‚úÖ –í–∞—à –±–æ—Ä–≥ {name} –Ω–∞ —Å—É–º—É {amount}‚Ç¥ –ø–æ–≥–∞—à–µ–Ω–æ –∑ –±—é–¥–∂–µ—Ç—É.",
                reply_markup=generate_back_button()
            )
        else:
            await query.message.edit_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–Ω—ñ –±–æ—Ä–≥—É {name}.",
                reply_markup=generate_back_button()
            )

    elif callback_data.startswith("debt_paid_"):
        parts = callback_data.split("_", 2)
        if len(parts) < 3:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        name_amount = parts[2].rsplit("_", 1)
        if len(name_amount) < 2:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        name = name_amount[0]
        try:
            amount = float(name_amount[1])
        except ValueError:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Å—É–º–∏.")
            return

        if close_debt(user_id, name, amount):
            add_new_transaction(user_id, amount, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–æ—Ä–≥—É", "–¥–æ—Ö—ñ–¥")

            await query.message.edit_text(
                f"‚úÖ –ë–æ—Ä–≥ {name} –Ω–∞ —Å—É–º—É {amount}‚Ç¥ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø–æ–≥–∞—à–µ–Ω–∏–π. –°—É–º—É –¥–æ–¥–∞–Ω–æ –¥–æ –±—é–¥–∂–µ—Ç—É.",
                reply_markup=generate_back_button()
            )
        else:
            await query.message.edit_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –±–æ—Ä–≥—É {name}.",
                reply_markup=generate_back_button()
            )

    elif callback_data.startswith("confirm_delete_"):
        parts = callback_data.split("_", 3)
        if len(parts) < 4:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        name = parts[2]
        try:
            amount = float(parts[3].split("_")[0])
            debt_type = "_".join(parts[3].split("_")[1:])
        except (ValueError, IndexError):
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_debt_{name}_{amount}_{debt_type}"),
                InlineKeyboardButton("‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_delete_{debt_type}")
            ]
        ]

        await query.message.edit_text(
            f"<b>‚ö†Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>\n\n–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±–æ—Ä–≥ <b>{name}</b> –Ω–∞ —Å—É–º—É <b>{amount}‚Ç¥</b>?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif callback_data.startswith("cancel_delete_"):
        debt_type = callback_data.split("_", 2)[2]
        await query.message.edit_text(
            "‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"debts_{debt_type}")]])
        )

    elif callback_data.startswith("delete_debt_"):
        parts = callback_data.split("_", 3)
        if len(parts) < 4:
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        name = parts[2]
        try:
            amount = float(parts[3].split("_")[0])
            debt_type = "_".join(parts[3].split("_")[1:])
        except (ValueError, IndexError):
            await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        if debt_type == "i_owe":
            amount = -amount

        if close_debt(user_id, name, amount):
            await query.message.edit_text(
                f"‚úÖ –ë–æ—Ä–≥ {name} –Ω–∞ —Å—É–º—É {abs(amount)}‚Ç¥ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"debts_{debt_type}")]])
            )
        else:
            await query.message.edit_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –±–æ—Ä–≥—É {name}.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"debts_{debt_type}")]])
            )


async def handle_message(update: Update, context: CallbackContext):
    pass


async def ask_debt_name(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ª—é–¥–∏–Ω–∏, —è–∫—ñ–π –≤–∏ –≤–∏–Ω–Ω—ñ –∞–±–æ —è–∫–∞ –≤–∏–Ω–Ω–∞ –≤–∞–º:")
    return DEBT_NAME


async def ask_debt_amount(update: Update, context: CallbackContext):
    context.user_data["debt_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –±–æ—Ä–≥—É:")
    return DEBT_AMOUNT


async def save_debt_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    debt_name = context.user_data.get("debt_name")
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")
        return DEBT_AMOUNT

    if save_debt(user_id, debt_name, amount):
        await update.message.reply_text(f"‚úÖ –ë–æ—Ä–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {debt_name} ‚Äî {amount}‚Ç¥")
    else:
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–æ—Ä–≥—É.")

    return ConversationHandler.END


async def cancel_add_debt(update: Update, context: CallbackContext):
    await update.message.reply_text("üö´ –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ—Ä–≥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


async def handle_debt_amount_input(update: Update, context: CallbackContext):
    try:
        amount = float(update.message.text)
        context.user_data["debt_amount"] = amount

        await update.message.reply_text(
            "–ù–∞–∑–≤–∞ –±–æ—Ä–≥—É (–ü–Ü–ë –∞–±–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è):"
        )
        return DEBT_NAME_INPUT
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")
        return DEBT_AMOUNT_INPUT


async def handle_debt_name_input(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if update.message is None:
        print("Error: update.message is None in handle_debt_name_input")
        return ConversationHandler.END

    debt_name = update.message.text
    debt_amount = context.user_data.get("debt_amount", 0)
    debt_type = context.user_data.get("debt_type", "owed_to_me")

    if not debt_name or debt_name.strip() == "":
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞ –±–æ—Ä–≥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return DEBT_NAME_INPUT

    if debt_type == "i_owe":
        debt_amount = -abs(debt_amount)
    else:
        debt_amount = abs(debt_amount)

    print(f"Saving debt: user_id={user_id}, debt_name='{debt_name}', debt_amount={debt_amount}, debt_type={debt_type}")

    save_result = save_debt(user_id, debt_name, debt_amount)

    print(f"Save result: {save_result}")

    if save_result:
        if debt_type == "i_owe":
            await update.message.reply_text(
                f"‚úÖ –ë–æ—Ä–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: –í–∏ –≤–∏–Ω–Ω—ñ {debt_name} ‚Äî {abs(debt_amount)}‚Ç¥",
                reply_markup=generate_debt_confirmation_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚úÖ –ë–æ—Ä–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {debt_name} –≤–∏–Ω–µ–Ω –≤–∞–º ‚Äî {debt_amount}‚Ç¥",
                reply_markup=generate_debt_confirmation_keyboard()
            )
    else:
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–æ—Ä–≥—É.")

    return ConversationHandler.END


async def send_debt_reminder(context: CallbackContext):
    job = context.job
    user_id = job.chat_id
    debts = get_active_debts(user_id)
    if debts:
        text = "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –±–æ—Ä–≥–∏:\n\n"

        debts_i_owe = [(name, amount) for name, amount in debts if amount < 0]
        if debts_i_owe:
            text += "üí∏ –í–∏ –≤–∏–Ω–Ω—ñ:\n"
            for name, amount in debts_i_owe:
                text += f"‚Ä¢ {name}: {abs(amount)}‚Ç¥\n"
            text += "\n"

        debts_owed_to_me = [(name, amount) for name, amount in debts if amount > 0]
        if debts_owed_to_me:
            text += "üí∞ –í–∞–º –≤–∏–Ω–Ω—ñ:\n"
            for name, amount in debts_owed_to_me:
                text += f"‚Ä¢ {name}: {amount}‚Ç¥\n"

        await context.bot.send_message(chat_id=user_id, text=text)


async def set_daily_reminder(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()

    context.job_queue.run_daily(
        send_debt_reminder,
        time=time(hour=9, minute=0),
        chat_id=chat_id,
        name=str(chat_id)
    )

    if update.callback_query:
        await update.callback_query.answer("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –æ 9:00.")


async def adddebt_command(update: Update, context: CallbackContext):
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `/adddebt —ñ–º'—è —Å—É–º–∞`\n–ü—Ä–∏–∫–ª–∞–¥: `/adddebt –û–ª–µ–∫—Å—ñ–π 3000`",
                                            parse_mode="Markdown")
            return

        name = args[0]
        amount = float(args[1])

        if save_debt(update.effective_user.id, name, amount):
            await update.message.reply_text(
                f"‚úÖ –ë–æ—Ä–≥ –¥–æ–¥–∞–Ω–æ: {name} ‚Äî {amount}‚Ç¥",
                reply_markup=generate_debt_confirmation_keyboard()
            )
        else:
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–æ—Ä–≥—É.")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `/adddebt —ñ–º'—è —Å—É–º–∞`\n–ü—Ä–∏–∫–ª–∞–¥: `/adddebt –û–ª–µ–∫—Å—ñ–π 3000`",
                                        parse_mode="Markdown")


def generate_back_button():
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]]
    return InlineKeyboardMarkup(keyboard)


def generate_debt_confirmation_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –±–æ—Ä–≥—ñ–≤", callback_data="debt_back")],
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∏–π –±–æ—Ä–≥", callback_data="add_debt")]
    ]
    return InlineKeyboardMarkup(keyboard)


debt_handler = CallbackQueryHandler(handle_debt_callback, pattern='^debt$')
debt_command_handler = CommandHandler("debt", handle_debt_callback)
debt_menu_handler = CallbackQueryHandler(debt_menu_button_handler,
                                         pattern='^(view_debts|debt_history|close_debt|add_debt|remind_debt|help_debt|debt_back)$')
debt_category_handler = CallbackQueryHandler(show_debts_by_category, pattern='^(debts_i_owe|debts_owed_to_me)$')
debt_action_handler = CallbackQueryHandler(handle_debt_action,
                                           pattern='^(pay_debt_|debt_paid_|delete_debt_|confirm_delete_|cancel_delete_)')
debt_message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
adddebt_handler = CommandHandler("adddebt", adddebt_command)
set_reminder_handler = CommandHandler("debtreminder", set_daily_reminder)

add_debt_conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("adddebt_dialog", ask_debt_name),
        CallbackQueryHandler(debt_type_handler, pattern='^(debt_i_owe|debt_owed_to_me)$')
    ],
    states={
        DEBT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_debt_amount)],
        DEBT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_debt_handler)],
        DEBT_AMOUNT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_debt_amount_input)],
        DEBT_NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_debt_name_input)]
    },
    fallbacks=[CommandHandler("cancel", cancel_add_debt)]
)
