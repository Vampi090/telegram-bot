from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, 
    CallbackQueryHandler, 
    CommandHandler, 
    ConversationHandler,
    MessageHandler,
    filters
)
from keyboards.debt_menu import debt_menu_keyboard
from services.logging_service import log_command_usage
from services.database_service import save_debt, get_active_debts, get_debt_history, close_debt, get_budgets
from services.transaction_service import add_new_transaction
from datetime import datetime, time

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DEBT_NAME, DEBT_AMOUNT, DEBT_TYPE, DEBT_AMOUNT_INPUT, DEBT_NAME_INPUT = range(5)


async def handle_debt_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–î–æ–ª–≥–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = debt_menu_keyboard()

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="ü§ù –û–±–ª—ñ–∫ –±–æ—Ä–≥—ñ–≤",
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            text="ü§ù –û–±–ª—ñ–∫ –±–æ—Ä–≥—ñ–≤",
            reply_markup=reply_markup
        )


async def debt_menu_button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –¥–æ–ª–≥–æ–≤"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "view_debts":
        debts = get_active_debts(user_id)
        if debts:
            text = "üìú –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"

            # –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –¥—Ä—É–≥–∏–º
            debts_i_owe = [(name, amount) for name, amount in debts if amount < 0]
            if debts_i_owe:
                text += "üí∏ –í—ã –¥–æ–ª–∂–Ω—ã:\n"
                for name, amount in debts_i_owe:
                    text += f"‚Ä¢ {name}: {abs(amount)}‚Ç¥\n"
                text += "\n"

            # –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            debts_owed_to_me = [(name, amount) for name, amount in debts if amount > 0]
            if debts_owed_to_me:
                text += "üí∞ –í–∞–º –¥–æ–ª–∂–Ω—ã:\n"
                for name, amount in debts_owed_to_me:
                    text += f"‚Ä¢ {name}: {amount}‚Ç¥\n"
        else:
            text = "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤."
        await query.message.edit_text(text, reply_markup=generate_back_button())

    elif query.data == "debt_history":
        history = get_debt_history(user_id)
        if history:
            text = "<b>üìö –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤:</b>\n\n"

            # –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –¥—Ä—É–≥–∏–º
            debts_i_owe = [(name, amount, status, timestamp) for name, amount, status, timestamp in history if amount < 0]
            if debts_i_owe:
                text += "<b>üí∏ –í—ã –¥–æ–ª–∂–Ω—ã:</b>\n"
                for name, amount, status, timestamp in debts_i_owe:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å –¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω
                    text += f"‚Ä¢ <b>{name}</b>\n  <code>–°—É–º–º–∞:</code> <b>{abs(amount)}‚Ç¥</b>\n  <code>–°—Ç–∞—Ç—É—Å:</code> {status}\n  <code>–î–∞—Ç–∞:</code> {timestamp}\n\n"

            # –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            debts_owed_to_me = [(name, amount, status, timestamp) for name, amount, status, timestamp in history if amount > 0]
            if debts_owed_to_me:
                text += "<b>üí∞ –í–∞–º –¥–æ–ª–∂–Ω—ã:</b>\n"
                for name, amount, status, timestamp in debts_owed_to_me:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ –∑–Ω–∞–∫–æ–º –ø–ª—é—Å –¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    text += f"‚Ä¢ <b>{name}</b>\n  <code>–°—É–º–º–∞:</code> <b>{amount}‚Ç¥</b>\n  <code>–°—Ç–∞—Ç—É—Å:</code> {status}\n  <code>–î–∞—Ç–∞:</code> {timestamp}\n\n"
        else:
            text = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=generate_back_button())

    elif query.data == "close_debt":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–≥–æ–≤
        text = "<b>üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–ª–≥–æ–≤:</b>"
        keyboard = [
            [InlineKeyboardButton("üí∏ –í—ã –¥–æ–ª–∂–Ω—ã", callback_data="debts_i_owe")],
            [InlineKeyboardButton("üí∞ –í–∞–º –¥–æ–ª–∂–Ω—ã", callback_data="debts_owed_to_me")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]
        ]

        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "add_debt":
        text = "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ª–≥–∞:"
        keyboard = [
            [InlineKeyboardButton("üí∏ –Ø –¥–æ–ª–∂–µ–Ω", callback_data="debt_i_owe")],
            [InlineKeyboardButton("üí∞ –ú–Ω–µ –¥–æ–ª–∂–Ω—ã", callback_data="debt_owed_to_me")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]
        ]
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "remind_debt":
        await set_daily_reminder(update, context)
        await query.message.edit_text(
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.",
            reply_markup=generate_back_button()
        )

    elif query.data == "help_debt":
        help_text = (
            "üÜò *–ü–æ–º–æ—â—å –ø–æ –¥–æ–ª–≥–∞–º:*\n\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –¥–æ–ª–≥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ (—è –¥–æ–ª–∂–µ–Ω/–º–Ω–µ –¥–æ–ª–∂–Ω—ã).\n"
            "üí∏ –Ø –¥–æ–ª–∂–µ–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ª–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–ª–∂–Ω—ã –∫–æ–º—É-—Ç–æ.\n"
            "üí∞ –ú–Ω–µ –¥–æ–ª–∂–Ω—ã ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ª–≥, –∫–æ—Ç–æ—Ä—ã–π –∫—Ç–æ-—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º.\n"
            "üìú –ú–æ–∏ –¥–æ–ª–≥–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.\n"
            "üìö –ò—Å—Ç–æ—Ä–∏—è ‚Äî –≤—Å–µ –¥–æ–ª–≥–∏, –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ.\n"
            "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π.\n"
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:00.\n"
            "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await query.message.edit_text(help_text, parse_mode="Markdown", reply_markup=generate_back_button())

    elif query.data == "debt_back":
        await handle_debt_callback(update, context)


async def debt_type_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–ª–≥–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "debt_i_owe":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–Ø –¥–æ–ª–∂–µ–Ω"
        context.user_data["debt_type"] = "i_owe"
        await query.message.edit_text(
            "üí∏ *–Ø –¥–æ–ª–∂–µ–Ω*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞:", 
            parse_mode="Markdown"
        )
        return DEBT_AMOUNT_INPUT

    elif query.data == "debt_owed_to_me":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ú–Ω–µ –¥–æ–ª–∂–Ω—ã"
        context.user_data["debt_type"] = "owed_to_me"
        await query.message.edit_text(
            "üí∞ *–ú–Ω–µ –¥–æ–ª–∂–Ω—ã*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞:", 
            parse_mode="Markdown"
        )
        return DEBT_AMOUNT_INPUT


async def show_debts_by_category(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—è –¥–æ–ª–∂–µ–Ω/–º–Ω–µ –¥–æ–ª–∂–Ω—ã)"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    debts = get_active_debts(user_id)

    if not debts:
        await query.message.edit_text(
            "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.",
            reply_markup=generate_back_button()
        )
        return

    if query.data == "debts_i_owe":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –¥—Ä—É–≥–∏–º
        debts_i_owe = [(name, amount) for name, amount in debts if amount < 0]

        if not debts_i_owe:
            await query.message.edit_text(
                "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–ª–∂–Ω—ã.",
                reply_markup=generate_back_button()
            )
            return

        text = "<b>üìú –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–ª–∂–Ω—ã:</b>\n\n"
        for i, (name, amount) in enumerate(debts_i_owe):
            text += f"{i+1}. <b>{name}</b>: {abs(amount)}‚Ç¥\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–ª–≥–∞
        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω
        for i, (name, amount) in enumerate(debts_i_owe):
            row = [
                InlineKeyboardButton(f"üí∏ –ü–æ–≥–∞—Å–∏—Ç—å: {name}", callback_data=f"pay_debt_{name}_{abs(amount)}"),
                InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å: {name}", callback_data=f"confirm_delete_{name}_{abs(amount)}_i_owe")
            ]
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="close_debt")])

        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "debts_owed_to_me":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        debts_owed_to_me = [(name, amount) for name, amount in debts if amount > 0]

        if not debts_owed_to_me:
            await query.message.edit_text(
                "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –¥–æ–ª–∂–Ω—ã.",
                reply_markup=generate_back_button()
            )
            return

        text = "<b>üìú –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –¥–æ–ª–∂–Ω—ã:</b>\n\n"
        for i, (name, amount) in enumerate(debts_owed_to_me):
            text += f"{i+1}. <b>{name}</b>: {amount}‚Ç¥\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–ª–≥–∞
        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for i, (name, amount) in enumerate(debts_owed_to_me):
            row = [
                InlineKeyboardButton(f"üí∞ –î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω: {name}", callback_data=f"debt_paid_{name}_{amount}"),
                InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å: {name}", callback_data=f"confirm_delete_{name}_{amount}_owed_to_me")
            ]
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="close_debt")])

        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def handle_debt_action(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–ª–≥–∞–º–∏ (–ø–æ–≥–∞—à–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥"
    if callback_data.startswith("pay_debt_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å—É–º–º—É –∏–∑ callback_data
        parts = callback_data.split("_", 2)
        if len(parts) < 3:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∞—Ç: pay_debt_name_amount
        name_amount = parts[2].rsplit("_", 1)
        if len(name_amount) < 2:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        name = name_amount[0]
        try:
            amount = float(name_amount[1])
        except ValueError:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—É–º–º—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥ –≤ –±—é–¥–∂–µ—Ç–µ
        budgets = get_budgets(user_id)
        total_budget = sum(budget_amount for _, budget_amount in budgets)

        if total_budget < amount:
            await query.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—é–¥–∂–µ—Ç–µ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞.\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {amount}‚Ç¥\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {total_budget}‚Ç¥",
                reply_markup=generate_back_button()
            )
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ª–≥
        if close_debt(user_id, name, -amount):  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –¥–æ–ª–∂–µ–Ω
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞
            add_new_transaction(user_id, -amount, "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞", "—Ä–∞—Å—Ö–æ–¥")

            await query.message.edit_text(
                f"‚úÖ –í–∞—à –¥–æ–ª–≥ {name} –Ω–∞ —Å—É–º–º—É {amount}‚Ç¥ –ø–æ–≥–∞—à–µ–Ω –∏–∑ –±—é–¥–∂–µ—Ç–∞.",
                reply_markup=generate_back_button()
            )
        else:
            await query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ {name}.",
                reply_markup=generate_back_button()
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω" (–¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –¥–æ–ª–∂–Ω—ã)
    elif callback_data.startswith("debt_paid_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å—É–º–º—É –∏–∑ callback_data
        parts = callback_data.split("_", 2)
        if len(parts) < 3:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∞—Ç: debt_paid_name_amount
        name_amount = parts[2].rsplit("_", 1)
        if len(name_amount) < 2:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        name = name_amount[0]
        try:
            amount = float(name_amount[1])
        except ValueError:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—É–º–º—ã.")
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ª–≥
        if close_debt(user_id, name, amount):  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –¥–æ–ª–∂–Ω—ã
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ—Ö–æ–¥–∞
            add_new_transaction(user_id, amount, "–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞", "–¥–æ—Ö–æ–¥")

            await query.message.edit_text(
                f"‚úÖ –î–æ–ª–≥ {name} –Ω–∞ —Å—É–º–º—É {amount}‚Ç¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π. –°—É–º–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—é–¥–∂–µ—Ç.",
                reply_markup=generate_back_button()
            )
        else:
            await query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–ª–≥–∞ {name}.",
                reply_markup=generate_back_button()
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞"
    elif callback_data.startswith("confirm_delete_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å—É–º–º—É –∏–∑ callback_data
        parts = callback_data.split("_", 3)
        if len(parts) < 4:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∞—Ç: confirm_delete_name_amount_type
        name = parts[2]
        try:
            amount = float(parts[3].split("_")[0])
            debt_type = "_".join(parts[3].split("_")[1:])  # i_owe –∏–ª–∏ owed_to_me
        except (ValueError, IndexError):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_debt_{name}_{amount}_{debt_type}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{debt_type}")
            ]
        ]

        await query.message.edit_text(
            f"<b>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥ <b>{name}</b> –Ω–∞ —Å—É–º–º—É <b>{amount}‚Ç¥</b>?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"
    elif callback_data.startswith("cancel_delete_"):
        debt_type = callback_data.split("_", 2)[2]  # i_owe –∏–ª–∏ owed_to_me
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–æ–ª–≥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await query.message.edit_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"debts_{debt_type}")]])
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥" (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    elif callback_data.startswith("delete_debt_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å—É–º–º—É –∏–∑ callback_data
        parts = callback_data.split("_", 3)
        if len(parts) < 4:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∞—Ç: delete_debt_name_amount_type
        name = parts[2]
        try:
            amount = float(parts[3].split("_")[0])
            debt_type = "_".join(parts[3].split("_")[1:])  # i_owe –∏–ª–∏ owed_to_me
        except (ValueError, IndexError):
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–ª–≥–∞
        if debt_type == "i_owe":
            amount = -amount  # –Ø –¥–æ–ª–∂–µ–Ω - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ª–≥ –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±—é–¥–∂–µ—Ç
        if close_debt(user_id, name, amount):
            await query.message.edit_text(
                f"‚úÖ –î–æ–ª–≥ {name} –Ω–∞ —Å—É–º–º—É {abs(amount)}‚Ç¥ —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"debts_{debt_type}")]])
            )
        else:
            await query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ {name}.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"debts_{debt_type}")]])
            )

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–≥–∞"""
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–≥–∞,
    # —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
    pass


async def ask_debt_name(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–∞–º:")
    return DEBT_NAME


async def ask_debt_amount(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–æ–ª–≥–∞"""
    context.user_data["debt_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞:")
    return DEBT_AMOUNT


async def save_debt_handler(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    debt_name = context.user_data.get("debt_name")
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return DEBT_AMOUNT

    if save_debt(user_id, debt_name, amount):
        await update.message.reply_text(f"‚úÖ –î–æ–ª–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {debt_name} ‚Äî {amount}‚Ç¥")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")

    return ConversationHandler.END


async def cancel_add_debt(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞"""
    await update.message.reply_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def handle_debt_amount_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–æ–ª–≥–∞"""
    try:
        amount = float(update.message.text)
        context.user_data["debt_amount"] = amount

        await update.message.reply_text(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞ (–§–ò–û –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è):"
        )
        return DEBT_NAME_INPUT
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return DEBT_AMOUNT_INPUT


async def handle_debt_name_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update.message –Ω–µ None
    if update.message is None:
        print("Error: update.message is None in handle_debt_name_input")
        return ConversationHandler.END

    debt_name = update.message.text
    debt_amount = context.user_data.get("debt_amount", 0)
    debt_type = context.user_data.get("debt_type", "owed_to_me")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ debt_name –Ω–µ –ø—É—Å—Ç–æ–π
    if not debt_name or debt_name.strip() == "":
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return DEBT_NAME_INPUT

    # –ï—Å–ª–∏ —Ç–∏–ø –¥–æ–ª–≥–∞ "—è –¥–æ–ª–∂–µ–Ω", –º–µ–Ω—è–µ–º –∑–Ω–∞–∫ —Å—É–º–º—ã –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
    if debt_type == "i_owe":
        debt_amount = -abs(debt_amount)
    else:
        debt_amount = abs(debt_amount)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    print(f"Saving debt: user_id={user_id}, debt_name='{debt_name}', debt_amount={debt_amount}, debt_type={debt_type}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ª–≥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    save_result = save_debt(user_id, debt_name, debt_amount)

    print(f"Save result: {save_result}")

    if save_result:
        if debt_type == "i_owe":
            await update.message.reply_text(
                f"‚úÖ –î–æ–ª–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –í—ã –¥–æ–ª–∂–Ω—ã {debt_name} ‚Äî {abs(debt_amount)}‚Ç¥",
                reply_markup=generate_debt_confirmation_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚úÖ –î–æ–ª–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {debt_name} –¥–æ–ª–∂–µ–Ω –≤–∞–º ‚Äî {debt_amount}‚Ç¥",
                reply_markup=generate_debt_confirmation_keyboard()
            )
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")

    return ConversationHandler.END


async def send_debt_reminder(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö"""
    job = context.job
    user_id = job.chat_id
    debts = get_active_debts(user_id)
    if debts:
        text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö:\n\n"

        # –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –¥—Ä—É–≥–∏–º
        debts_i_owe = [(name, amount) for name, amount in debts if amount < 0]
        if debts_i_owe:
            text += "üí∏ –í—ã –¥–æ–ª–∂–Ω—ã:\n"
            for name, amount in debts_i_owe:
                text += f"‚Ä¢ {name}: {abs(amount)}‚Ç¥\n"
            text += "\n"

        # –î–æ–ª–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        debts_owed_to_me = [(name, amount) for name, amount in debts if amount > 0]
        if debts_owed_to_me:
            text += "üí∞ –í–∞–º –¥–æ–ª–∂–Ω—ã:\n"
            for name, amount in debts_owed_to_me:
                text += f"‚Ä¢ {name}: {amount}‚Ç¥\n"

        await context.bot.send_message(chat_id=user_id, text=text)


async def set_daily_reminder(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö"""
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    context.job_queue.run_daily(
        send_debt_reminder,
        time=time(hour=9, minute=0),
        chat_id=chat_id,
        name=str(chat_id)
    )

    if update.callback_query:
        await update.callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.")


async def adddebt_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adddebt"""
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `/adddebt –∏–º—è —Å—É–º–º–∞`\n–ü—Ä–∏–º–µ—Ä: `/adddebt –ê–ª–µ–∫—Å–µ–π 3000`", parse_mode="Markdown")
            return

        name = args[0]
        amount = float(args[1])

        if save_debt(update.effective_user.id, name, amount):
            await update.message.reply_text(
                f"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {name} ‚Äî {amount}‚Ç¥",
                reply_markup=generate_debt_confirmation_keyboard()
            )
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `/adddebt –∏–º—è —Å—É–º–º–∞`\n–ü—Ä–∏–º–µ—Ä: `/adddebt –ê–ª–µ–∫—Å–µ–π 3000`", parse_mode="Markdown")


def generate_back_button():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]]
    return InlineKeyboardMarkup(keyboard)


def generate_debt_confirmation_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞"""
    keyboard = [
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–ª–≥–∞–º", callback_data="debt_back")],
        [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–æ–ª–≥", callback_data="add_debt")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
debt_handler = CallbackQueryHandler(handle_debt_callback, pattern='^debt$')
debt_command_handler = CommandHandler("debt", handle_debt_callback)
debt_menu_handler = CallbackQueryHandler(debt_menu_button_handler, pattern='^(view_debts|debt_history|close_debt|add_debt|remind_debt|help_debt|debt_back)$')
debt_category_handler = CallbackQueryHandler(show_debts_by_category, pattern='^(debts_i_owe|debts_owed_to_me)$')
debt_action_handler = CallbackQueryHandler(handle_debt_action, pattern='^(pay_debt_|debt_paid_|delete_debt_|confirm_delete_|cancel_delete_)')
debt_message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
adddebt_handler = CommandHandler("adddebt", adddebt_command)
set_reminder_handler = CommandHandler("debtreminder", set_daily_reminder)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞
add_debt_conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("adddebt_dialog", ask_debt_name),
        CallbackQueryHandler(debt_type_handler, pattern='^(debt_i_owe|debt_owed_to_me)$')
    ],
    states={
        DEBT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_debt_amount)],
        DEBT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_debt_handler)],
        DEBT_AMOUNT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_debt_amount_input)],
        DEBT_NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_debt_name_input)]
    },
    fallbacks=[CommandHandler("cancel", cancel_add_debt)]
)
