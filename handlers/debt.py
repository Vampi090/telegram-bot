from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, 
    CallbackQueryHandler, 
    CommandHandler, 
    ConversationHandler,
    MessageHandler,
    filters
)
from keyboards.debt_menu import debt_menu_keyboard
from services.logging_service import log_command_usage
from services.database_service import save_debt, get_active_debts, get_debt_history, close_debt
from datetime import datetime, time

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DEBT_NAME, DEBT_AMOUNT = range(2)


async def handle_debt_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–î–æ–ª–≥–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = debt_menu_keyboard()

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="ü§ù –û–±–ª—ñ–∫ –±–æ—Ä–≥—ñ–≤",
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            text="ü§ù –û–±–ª—ñ–∫ –±–æ—Ä–≥—ñ–≤",
            reply_markup=reply_markup
        )


async def debt_menu_button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –¥–æ–ª–≥–æ–≤"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "view_debts":
        debts = get_active_debts(user_id)
        text = (
            "üìú –í–∞—à–∏ –¥–æ–ª–≥–∏:\n" + "\n".join(f"{d[0]}: {d[1]}‚ÇΩ" for d in debts)
            if debts else "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤."
        )
        await query.message.edit_text(text, reply_markup=generate_back_button())

    elif query.data == "debt_history":
        history = get_debt_history(user_id)
        text = (
            "üìö –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤:\n" + "\n".join(f"{row[0]}: {row[1]}‚ÇΩ ({row[2]}) ‚Äî {row[3]}" for row in history)
            if history else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
        )
        await query.message.edit_text(text, reply_markup=generate_back_button())

    elif query.data == "close_debt":
        await query.message.edit_text(
            "‚úÖ –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –¥–æ–ª–≥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å (–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
            reply_markup=generate_back_button()
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data["waiting_for_close_debt"] = True

    elif query.data == "add_debt":
        text = (
            "‚ûï *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥:*\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥ –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/adddebt –ò–º—è –°—É–º–º–∞`\n\n"
            "*–ü—Ä–∏–º–µ—Ä:* `/adddebt –ê–ª–µ–∫—Å–µ–π 3000`\n"
            "–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å –æ –¥–æ–ª–≥–µ –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
        )
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=generate_back_button())

    elif query.data == "remind_debt":
        await set_daily_reminder(update, context)
        await query.message.edit_text(
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.",
            reply_markup=generate_back_button()
        )

    elif query.data == "help_debt":
        help_text = (
            "üÜò *–ü–æ–º–æ—â—å –ø–æ –¥–æ–ª–≥–∞–º:*\n\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞/–¥–æ–ª–≥.\n"
            "üìú –ú–æ–∏ –¥–æ–ª–≥–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.\n"
            "üìö –ò—Å—Ç–æ—Ä–∏—è ‚Äî –≤—Å–µ –¥–æ–ª–≥–∏, –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ.\n"
            "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π.\n"
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:00.\n"
            "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await query.message.edit_text(help_text, parse_mode="Markdown", reply_markup=generate_back_button())

    elif query.data == "debt_back":
        await handle_debt_callback(update, context)


async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–≥–∞"""
    if context.user_data.get("waiting_for_close_debt"):
        try:
            parts = update.message.text.split()
            if len(parts) < 2:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                return

            name = parts[0]
            amount = float(parts[1])

            if close_debt(update.effective_user.id, name, amount):
                await update.message.reply_text(f"‚úÖ –î–æ–ª–≥ {name} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –∑–∞–∫—Ä—ã—Ç.")
            else:
                await update.message.reply_text(f"‚ùå –î–æ–ª–≥ {name} –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data["waiting_for_close_debt"] = False

        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


async def ask_debt_name(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–∞–º:")
    return DEBT_NAME


async def ask_debt_amount(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–æ–ª–≥–∞"""
    context.user_data["debt_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞:")
    return DEBT_AMOUNT


async def save_debt_handler(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    debt_name = context.user_data.get("debt_name")
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return DEBT_AMOUNT

    if save_debt(user_id, debt_name, amount):
        await update.message.reply_text(f"‚úÖ –î–æ–ª–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {debt_name} ‚Äî {amount}‚ÇΩ")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")

    return ConversationHandler.END


async def cancel_add_debt(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞"""
    await update.message.reply_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def send_debt_reminder(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö"""
    job = context.job
    user_id = job.chat_id
    debts = get_active_debts(user_id)
    if debts:
        text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö:\n" + "\n".join(f"{d[0]}: {d[1]}‚ÇΩ" for d in debts)
        await context.bot.send_message(chat_id=user_id, text=text)


async def set_daily_reminder(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö"""
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    context.job_queue.run_daily(
        send_debt_reminder,
        time=time(hour=9, minute=0),
        chat_id=chat_id,
        name=str(chat_id)
    )

    if update.callback_query:
        await update.callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.")


async def adddebt_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adddebt"""
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `/adddebt –∏–º—è —Å—É–º–º–∞`\n–ü—Ä–∏–º–µ—Ä: `/adddebt –ê–ª–µ–∫—Å–µ–π 3000`", parse_mode="Markdown")
            return

        name = args[0]
        amount = float(args[1])

        if save_debt(update.effective_user.id, name, amount):
            await update.message.reply_text(f"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {name} ‚Äî {amount}‚ÇΩ")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.")

    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: `/adddebt –∏–º—è —Å—É–º–º–∞`\n–ü—Ä–∏–º–µ—Ä: `/adddebt –ê–ª–µ–∫—Å–µ–π 3000`", parse_mode="Markdown")


def generate_back_button():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="debt_back")]]
    return InlineKeyboardMarkup(keyboard)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
debt_handler = CallbackQueryHandler(handle_debt_callback, pattern='^debt$')
debt_command_handler = CommandHandler("debt", handle_debt_callback)
debt_menu_handler = CallbackQueryHandler(debt_menu_button_handler, pattern='^(view_debts|debt_history|close_debt|add_debt|remind_debt|help_debt|debt_back)$')
debt_message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
adddebt_handler = CommandHandler("adddebt", adddebt_command)
set_reminder_handler = CommandHandler("debtreminder", set_daily_reminder)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞
add_debt_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("adddebt_dialog", ask_debt_name)],
    states={
        DEBT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_debt_amount)],
        DEBT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_debt_handler)]
    },
    fallbacks=[CommandHandler("cancel", cancel_add_debt)]
)
