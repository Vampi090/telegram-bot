from datetime import datetime

class Transaction:
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    def __init__(self, id=None, user_id=None, amount=0.0, category="", transaction_type=None, timestamp=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Args:
            id (int, optional): ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_id (int, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount (float, optional): –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            category (str, optional): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_type (str, optional): –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
            timestamp (str, optional): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        self.id = id
        self.user_id = user_id
        self.amount = amount
        self.category = category
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if transaction_type is None:
            self.transaction_type = "–¥–æ—Ö–æ–¥" if amount > 0 else "—Ä–∞—Å—Ö–æ–¥"
        else:
            self.transaction_type = transaction_type
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if timestamp is None:
            self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        else:
            self.timestamp = timestamp
    
    @classmethod
    def from_db_tuple(cls, db_tuple):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Transaction –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            db_tuple (tuple): –ö–æ—Ä—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (id, user_id, amount, category, type, timestamp)
            
        Returns:
            Transaction: –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Transaction
        """
        if not db_tuple:
            return None
            
        if len(db_tuple) == 5:  # –ï—Å–ª–∏ –≤ –∫–æ—Ä—Ç–µ–∂–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (id, amount, category, type, timestamp)
            id, amount, category, transaction_type, timestamp = db_tuple
            return cls(id=id, amount=amount, category=category, 
                      transaction_type=transaction_type, timestamp=timestamp)
        elif len(db_tuple) == 4:  # –ï—Å–ª–∏ –≤ –∫–æ—Ä—Ç–µ–∂–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞ (timestamp, amount, category, type)
            timestamp, amount, category, transaction_type = db_tuple
            return cls(amount=amount, category=category, 
                      transaction_type=transaction_type, timestamp=timestamp)
        else:
            return None
    
    def to_dict(self):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç Transaction –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        return {
            'id': self.id,
            'user_id': self.user_id,
            'amount': self.amount,
            'category': self.category,
            'type': self.transaction_type,
            'timestamp': self.timestamp
        }
    
    def __str__(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Returns:
            str: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        return f"üìÖ {self.timestamp} | üí∞ {self.amount} | üìÇ {self.category} ({self.transaction_type})"