import sqlite3
import csv
import os
from datetime import datetime
import matplotlib.pyplot as plt
from models.transaction import Transaction
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.utils import get_column_letter

DATABASE_FILE = "finance_bot.db"

def get_expense_stats(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞)
    """
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT category, SUM(amount) FROM transactions
            WHERE user_id = ? AND type = '—Ä–∞—Å—Ö–æ–¥'
            GROUP BY category
            ORDER BY SUM(amount) DESC
        """, (user_id,))

        stats_data = cursor.fetchall()
        return stats_data
    except Exception as e:
        print(f"Error getting expense stats: {e}")
        return []
    finally:
        conn.close()

def generate_expense_chart(user_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = get_expense_stats(user_id)

        if not data:
            return None

        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        categories, amounts = zip(*data) if len(data) > 1 else ([data[0][0]], [data[0][1]])

        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        amounts = [abs(amount) for amount in amounts]

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        bars = plt.bar(categories, amounts, color=["#4CAF50", "#FF9800", "#2196F3", "#9C27B0", "#E91E63"])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        total = sum(amounts)
        for bar in bars:
            yval = bar.get_height()
            percent = (yval / total) * 100
            plt.text(bar.get_x() + bar.get_width() / 2, yval + 10, f"{percent:.1f}%", ha='center', va='bottom')

        # –ü–æ–¥–ø–∏—Å–∏
        plt.title("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        plt.ylabel("–°—É–º–º–∞ (–≥—Ä–Ω)")
        plt.xticks(rotation=45, ha='right')
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        file_path = f"chart_{user_id}.png"
        plt.tight_layout()
        plt.savefig(file_path)
        plt.close()

        return file_path
    except Exception as e:
        print(f"Error generating expense chart: {e}")
        return None

def export_transactions_to_excel(user_id):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel —Ñ–∞–π–ª —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É Excel —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT timestamp, amount, category, type FROM transactions 
            WHERE user_id = ?
            ORDER BY timestamp DESC
        """, (user_id,))

        transactions = cursor.fetchall()
        conn.close()

        if not transactions:
            return None

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏
        header_font = Font(name='Arial', size=12, bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        header_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

        # –°—Ç–∏–ª—å –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —è—á–µ–µ–∫
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        income_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
        expense_fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–∏–ø"]
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = header
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = thin_border

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for row_num, transaction in enumerate(transactions, 2):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = transaction[0]
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                date_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
            except:
                formatted_date = date_str

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ws.cell(row=row_num, column=1).value = formatted_date
            ws.cell(row=row_num, column=2).value = abs(float(transaction[1]))
            ws.cell(row=row_num, column=3).value = transaction[2]
            ws.cell(row=row_num, column=4).value = transaction[3]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —è—á–µ–π–∫–∞–º
            for col_num in range(1, 5):
                cell = ws.cell(row=row_num, column=col_num)
                cell.border = thin_border
                cell.alignment = Alignment(horizontal='center', vertical='center')

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if transaction[3].lower() == '–¥–æ—Ö–æ–¥':
                for col_num in range(1, 5):
                    ws.cell(row=row_num, column=col_num).fill = income_fill
            elif transaction[3].lower() == '—Ä–∞—Å—Ö–æ–¥':
                for col_num in range(1, 5):
                    ws.cell(row=row_num, column=col_num).fill = expense_fill

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_num in range(1, 5):
            column_letter = get_column_letter(col_num)
            max_length = 0
            for row_num in range(1, len(transactions) + 2):
                cell = ws.cell(row=row_num, column=col_num)
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            adjusted_width = max_length + 4  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
            ws.column_dimensions[column_letter].width = adjusted_width

        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        ws.freeze_panes = "A2"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = f"transactions_{user_id}.xlsx"
        wb.save(file_path)

        return file_path
    except Exception as e:
        print(f"Error exporting transactions to Excel: {e}")
        return None

def export_transactions_to_csv(user_id):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV —Ñ–∞–π–ª.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É CSV —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT timestamp, amount, category, type FROM transactions 
            WHERE user_id = ?
            ORDER BY timestamp DESC
        """, (user_id,))

        transactions = cursor.fetchall()
        conn.close()

        if not transactions:
            return None

        file_path = f"transactions_{user_id}.csv"

        # –°–æ–∑–¥–∞—ë–º CSV —Ñ–∞–π–ª —Å BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        with open(file_path, mode="w", encoding="utf-8-sig", newline="") as file:
            writer = csv.writer(file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            writer.writerow(["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–∏–ø"])
            writer.writerows(transactions)

        return file_path
    except Exception as e:
        print(f"Error exporting transactions to CSV: {e}")
        return None

def get_transaction_report(user_id, days=30):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞
    """
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT SUM(amount) FROM transactions
            WHERE user_id = ? AND type = '–¥–æ—Ö–æ–¥' AND 
            date(timestamp) >= date('now', ?)
        """, (user_id, f'-{days} days'))

        total_income = cursor.fetchone()[0] or 0

        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT SUM(amount) FROM transactions
            WHERE user_id = ? AND type = '—Ä–∞—Å—Ö–æ–¥' AND 
            date(timestamp) >= date('now', ?)
        """, (user_id, f'-{days} days'))

        total_expense = cursor.fetchone()[0] or 0

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        cursor.execute("""
            SELECT category, SUM(amount) FROM transactions
            WHERE user_id = ? AND type = '—Ä–∞—Å—Ö–æ–¥' AND 
            date(timestamp) >= date('now', ?)
            GROUP BY category
            ORDER BY SUM(amount) DESC
            LIMIT 3
        """, (user_id, f'-{days} days'))

        top_expense_categories = cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        cursor.execute("""
            SELECT COUNT(*) FROM transactions
            WHERE user_id = ? AND 
            date(timestamp) >= date('now', ?)
        """, (user_id, f'-{days} days'))

        transaction_count = cursor.fetchone()[0] or 0

        conn.close()

        return {
            'total_income': total_income,
            'total_expense': total_expense,
            'balance': total_income - total_expense,
            'top_expense_categories': top_expense_categories,
            'transaction_count': transaction_count,
            'days': days
        }
    except Exception as e:
        print(f"Error generating transaction report: {e}")
        return {
            'total_income': 0,
            'total_expense': 0,
            'balance': 0,
            'top_expense_categories': [],
            'transaction_count': 0,
            'days': days
        }
